# Exec into ws-daemon
function exec-daemon() {
    if [ ! -z "$1" ]; then
      kubectl exec -it "$1" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
      return
    fi

    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
        return
      done
      return 
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
}

# Exec into host
function exec-host() {
    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
        return
      done
      return 
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
}

function log-component() {
  local component=$1

  local result=$(kubectl get pods -l component="${component}" --sort-by=.metadata.creationTimestamp --no-headers=true -o custom-columns=Name:.metadata.name | grep "$component")
  if [ -z "$result" ]; then
    echo "$component not found"
    return
  fi

  if (( $(grep -c . <<< "$result") > 1 )); then
    readarray -t instances <<< "$result"
    select i in "${instances[@]}"
    do
      kubectl logs "$i" -c "$component"
      return
    done
    return
  fi

  kubectl logs "$result" -c "$component"
}

# Get daemon logs
function log-daemon() {
    if [ ! -z "$1" ]; then
      kubectl logs "$1" -c ws-daemon
      return
    fi

    log-component "ws-daemon"
}

# Get agent smith logs
function log-smith() {
  if [ ! -z "$1" ]; then
     kubectl logs "$1" -c agent-smith
     return
  fi

  log-component "agent-smith"g 
}

# Get ws-manager logs
function log-manager() {
  if [ ! -z "$1" ]; then
     kubectl logs "$1" -c ws-manager
     return
  fi

  log-component "ws-manager"
}

# Get registry facade logs
function log-reg() {
  if [ ! -z "$1" ]; then
     kubectl logs "$1" -c registry-facade
     return
  fi

  log-component "registry-facade"
}

function tail-prebuild() {
  kubectl exec -it "$1" -- tail -f /workspace/.gitpod/prebuild-log-0
}