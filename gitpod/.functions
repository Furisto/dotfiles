# Exec into ws-daemon
function exec-daemon() {
    if [ ! -z "$1" ]; then
      kubectl exec -it "$1" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
      return
    fi

    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
        return
      done
      return 
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
}

# Exec into host
function exec-host() {
    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
        return
      done
      return 
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
}

function log-component() {
  local component=$1

  local result=$(kubectl get pods -l component="${component}" --sort-by=.metadata.creationTimestamp --no-headers=true -o custom-columns=Name:.metadata.name | grep "$component")
  if [ -z "$result" ]; then
    echo "$component not found"
    return
  fi

  if (( $(grep -c . <<< "$result") > 1 )); then
    readarray -t instances <<< "$result"
    select i in "${instances[@]}"
    do
      kubectl logs "$i" -c "$component"
      return
    done
    return
  fi

  kubectl logs "$result" -c "$component"
}

# Get daemon logs
function log-daemon() {
    if [ ! -z "$1" ]; then
      kubectl logs "$1" -c ws-daemon
      return
    fi

    log-component "ws-daemon"
}

# Get agent smith logs
function log-smith() {
  if [ ! -z "$1" ]; then
     kubectl logs "$1" -c agent-smith
     return
  fi

  log-component "agent-smith"
}

# Get ws-manager logs
function log-manager() {
  if [ ! -z "$1" ]; then
     kubectl logs "$1" -c ws-manager
     return
  fi

  log-component "ws-manager"
}

# Get registry facade logs
function log-reg() {
  if [ ! -z "$1" ]; then
     kubectl logs "$1" -c registry-facade
     return
  fi

  log-component "registry-facade"
}

function tail-prebuild() {
  kubectl exec -it "$1" -- tail -f /workspace/.gitpod/prebuild-log-0
}

function minio-login() {
  local username=$(kubectl get secrets minio -o jsonpath="{.data.root-user}" | base64 -d)
  local password=$(kubectl get secrets minio -o jsonpath="{.data.root-password}" | base64 -d)

  echo "username: ${username}"
  echo "password: ${password}"
}

function db-login() {
  local username=$(kubectl get secrets mysql -o jsonpath="{.data.username}" | base64 -d)
  local password=$(kubectl get secrets mysql -o jsonpath="{.data.password}" | base64 -d)

  echo "username: ${username}"
  echo "password: ${password}"
}

function forward-minio() {
  local local_port=9001
  if [ -n "$1" ]; then
    local_port="$1"
  fi

  kubectl port-forward deploy/minio "$local_port":9001
}

function forward-db() {
  local local_port=3306
  if [ -n "$1" ]; then
    local_port="$1"
  fi

  kubectl port-forward statefulset/mysql "$local_port":3306
}

function ssh-ws-node() {
  gcloud config set project workspace-clusters
  gcloud config unset compute/region
  gcloud config unset compute/zone
  gcloud compute ssh "$1" --ssh-flag="-p 2222"
}

function preview-ctx() {
  /workspace/gitpod/dev/preview/install-k3s-kubeconfig.sh
  kubectx k3s-preview-environment
}


function _pending-ws-impl() {
  workspace_pods=$(kubectl get pods -l workspaceType=regular -o wide)
  gpctl workspaces list | grep PENDING | while read workspace 
  do 
    workspace_id=$(echo "$workspace" | awk '{print  $3}')
    owner=$(echo "$workspace" | awk '{print  $1}')
    pod=$(echo "$workspace_pods" | grep "$workspace_id")
    if [[ -n $pod ]];then
      echo "$pod $owner"
    fi
  done
}

function pending-ws() {  
  _pending-ws-impl | sort -k6 -h | column -t
}

function delete-ws() {
  workspace_id=$1
  kubectl patch pod $workspace_id --patch '{"metadata": { "finalizers": null }}' --type merge
  kubectl delete pod $workspace_id
}

function node-ws-count() {
  kubectl get pods -o wide -l workspaceType=regular --sort-by=.spec.nodeName -o custom-columns=:.spec.nodeName  | grep "\S" | uniq -c | sort -nr -k1,1
}
