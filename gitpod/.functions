# Exec into ws-daemon
function exec-daemon() {
    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "cd /mnt/workingarea;sh"
        return
      done
      return 
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh "cd /mnt/workingarea;sh"
}

# Exec into host
function exec-host() {
    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl exec -it "$i" -c ws-daemon -- sh -c "nsenter -t 1 -p -u -m -n bash"
        return
      done
      return 
    fi

    kubectl exec -it "$daemon" -c ws-daemon -- sh "nsenter -t 1 -p -u -m -n bash"
}

# Get daemon logs
function log-daemon() {
    local daemon=$(kubectl get pods -o custom-columns=Name:.metadata.name | grep ws-daemon)
    if [ -z "$daemon" ]; then
      echo "ws-daemon not found"
      return
    fi

    if (( $(grep -c . <<< "$daemon") > 1 )); then
      readarray -t instances <<< "$daemon"
      select i in "${instances[@]}"
      do
        kubectl logs "$i" -c ws-daemon
        return
      done
      return
    fi

    kubectl log "$daemon" -c ws-daemon
}

function node-pods() {
  kubectl get pods --all-namespaces --field-selector spec.nodeName="$1" --sort-by=.metadata.namespace
}

function node-pod-count() {
  kubectl get pods -o wide --all-namespaces --sort-by=.spec.nodeName -o custom-columns=:.spec.nodeName  | grep "\S" | uniq -c | sort -nr -k1,1 
}

function failed-pods() {
  kubectl get pods --all-namespaces --field-selector status.phase=Failed \
  -o custom-columns=NAMESPACE:.metadata.namespace,NAME:.metadata.name,REASON:.status.reason
}